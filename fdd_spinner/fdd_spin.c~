#define _GNU_SOURCE
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include <assert.h>
//headers for unix sockets. 
#include <string.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <unistd.h>

#define SOCKET_NAME "/tmp/fddspin.sock"
#define BUFFER_SIZE 10


#define STARTBYTE 0
#define ENDBYTE 1200000
#define PAGE 512
//#define STARTBYTE (272384/PAGE*PAGE) // must align
int read_sector();



int main() {
  //buffer must be page aligned, and the size of a sector.
  char *fbuffer = (char *) memalign(512,4096);
  perror("memalign");
  int fd=0;
  //get file descriptor directly to device. 
  fd = open("/dev/sda",O_RDONLY| O_DIRECT);
  perror("Error opening floppy device");
  assert(fd);
  assert(fbuffer);
  
  
  struct sockaddr_un addr;
  int down_flag = 0;
  int ret;
  int listen_socket;
  int data_socket;
  int result;
  char buffer[BUFFER_SIZE];

  //free old socket
  unlink(SOCKET_NAME);

    /* Create local socket. */

    listen_socket = socket(AF_UNIX, SOCK_STREAM, 0);
    if (listen_socket == -1) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    /*
     * For portability clear the whole structure, since some
     * implementations have additional (nonstandard) fields in
     * the structure.
     */

    memset(&addr, 0, sizeof(struct sockaddr_un));

    /* Bind socket to socket name. */

    addr.sun_family = AF_UNIX;
    strncpy(addr.sun_path, SOCKET_NAME, sizeof(addr.sun_path) - 1);

    ret = bind(listen_socket, (const struct sockaddr *) &addr,
               sizeof(struct sockaddr_un));
    if (ret == -1) {
        perror("bind");
        exit(EXIT_FAILURE);
    }

    /*
     * Prepare for accepting connections. The backlog size is set
     * to 20. So while one request is being processed other requests
     * can be waiting.
     */

    ret = listen(listen_socket, 20);
    if (ret == -1) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    /* This is the main loop for handling connections. */

    for (;;) {

        /* Wait for incoming connection. */

        data_socket = accept(listen_socket, NULL, NULL);
        if (data_socket == -1) {
            perror("accept");
            exit(EXIT_FAILURE);
        }
	printf("Accepted Connection\n");
        result = 0;
        for(;;) {

            /* block while waiting for data */

            ret = read(data_socket, buffer, BUFFER_SIZE);
	    //socket should always be readable. Something else is wrong if not. 
	    if (ret == -1) {
                perror("read");
		break;
            }
            buffer[BUFFER_SIZE - 1] = '\0';
	    printf("%d", atoi(buffer));
	    read_sector(fd, fbuffer, atoi(buffer)); 
	    memset(buffer, 0, sizeof(buffer));

            /* Add received summand. */

        }

       
    }

    close(listen_socket);

    /* Unlink the socket. */

    unlink(SOCKET_NAME);

    exit(EXIT_SUCCESS);
}







//Assume that the file descriptor and buffer 
int read_sector(int fd, char *buffer, int sector)
{
  if (sector > 0 && sector < 2880) {
        lseek(fd, sector , SEEK_SET);
        read(fd,buffer,512);
  }
    return 0;
}
